# 因为git是分布式版本控制系统，所以每个机器都需要有个识别信息的id
git config --global user.name "Alley"
git config --global user.email "1030184860@qq.com"
# 查看自己的配置
git config --list

# 创建仓库
git init

# 四个区间名称及含义
1. workspace 工作区
	add之前文件位于工作区，就是本地目录下，未交给git管理之前，但是在该仓库路径下的区
2. index/stage 暂存区
	add之后为暂存区
3. Repository 仓库去（本地仓库）
	commit提交

# 让git跟踪文件,将文件放到暂存区
git add *
# 让git删除跟踪的文件，将文件从暂存区删除
git rm --cached *

# 在add到暂存区之后，假如在工作区对暂存区的内容进行了修改，在git status查看状态时，会发现该文件提示有修改,输入
git diff 文件名，可以查看该文件在工作区和暂存区的区别
git restore 会使工作区的该文件恢复成上次提交到暂存区的状态，即在工作区的修改被撤销了。
git add 会将在工作区的改动提交的暂存区

# 将文件从仓库去commit入仓库
git commit -m "说明" 说明内容尽量别为空

# 版本退回
# 注意版本的穿梭是针对每次commit的，即每次穿梭的结果是某次commit提交后的版本
每次commit都会有log记录
git reflog可查看所有历史记录
git log可查看当前版本以及其以前的记录，以后的就不能看了
git log --pretty=oneline显示信息更简洁

	# 版本退回与恢复实现
		git reset --hard HEAD^  向前退回一次
		git reset --hard HEAD^  向前退回两次
		git reset --hard id(需要输入大概5位才行) 版本转为指定id的版本

# 删除文件
文件进行提交后，假如删除了也需要再重新提交一次才行，这样以后版本穿越还能穿越到未删除前的状态

# 分支管理
查看分支
	git branch
创建分支
	git branch name
切换分支
	git switch name
	git checkout name
创建+切换分支
	git branch -b name
	gti switch -c name
合并某分支到当前分支
	git merge name
删除分支
	gti branch -d name

# 解决github打不开的问题
将解决方法收藏到了谷歌的收藏栏，通过修改hosts实现
windows
	修改c:/windows32/driver/etc/hosts
	使用记事本打开，打开前给你使用的用户添加修改权限
linux
	sudo vim /etc/hosts

# 添加远程库，使用origin与特定远程库关联
git remote add origin 地址
# 删除远程库
git remote rm origin
# 查看远程库
git remote -v

# 提交到远程库
git push -u origin master
